{
    "ast": null,
    "code": "import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/vincentpoulain/Development/quiet/src/components/Views/ProfileContent.tsx\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n    font-size: 16px;\\n    color: \", \";\\n    @media screen and (max-width: 812px) {\\n        font-size: 14px;\\n    }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport Box from \"grommet/components/Box/Box\";\nimport ResponsiveContext from \"grommet/contexts/ResponsiveContext/ResponsiveContext\";\nimport Tab from \"grommet/components/Tab/Tab\";\nimport Tabs from \"grommet/components/Tabs/Tabs\";\nimport React, { useContext, useState } from 'react';\nimport ReactGA from 'react-ga';\nimport styled from 'styled-components';\nimport Section from './Section';\nconst TabTitle = styled.span(_templateObject(), props => !props.isActive ? '#333333' : '#D87551');\n\n/* Hook allowing to keep tab updated with query parameters\n   We probably should React Router to do it properly in order to \n   conserve history & state.\n\n   - If no query parameter provided the first section is selected by default\n   - Query parameters named \"section\" is filled with current sectionId when new tab \n    is clicked\n*/\nfunction trackChangeTab() {\n  ReactGA.initialize('UA-149517534-1');\n  ReactGA.event({\n    category: 'Section',\n    action: 'Click on change section'\n  });\n}\n\nfunction useTab(username, sortedSections) {\n  // const location = useLocation()\n  // const history = useHistory()\n  // const params = new URLSearchParams(location.search)\n  const activeSectionId = undefined;\n  const activeSessionIndex = sortedSections.findIndex(x => x.id === activeSectionId);\n  const {\n    0: activeTab,\n    1: setActiveTab\n  } = useState(activeSessionIndex !== -1 ? activeSessionIndex : 0);\n\n  const setTab = args => {\n    setActiveTab(args); // history.replace(`/${username}?section=${sortedSections[args].id}`)\n\n    trackChangeTab();\n  };\n\n  return {\n    activeTab,\n    setTab\n  };\n}\n\nconst ProfileContent = props => {\n  const size = useContext(ResponsiveContext);\n  const sortedSections = props.sections.sort((a, b) => a.index - b.index);\n  const {\n    activeTab,\n    setTab\n  } = useTab(props.username, sortedSections);\n  return __jsx(Box, {\n    margin: {\n      top: 'small'\n    },\n    pad: {\n      horizontal: size === 'small' ? 'none' : 'large'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, __jsx(Tabs, {\n    justify: \"start\",\n    onActive: setTab,\n    flex: false,\n    activeIndex: activeTab,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, sortedSections.map((section, index) => {\n    return __jsx(Tab, {\n      key: section.id,\n      title: props.sections.length > 1 && __jsx(TabTitle, {\n        isActive: activeTab === index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, section.name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, __jsx(Section, {\n      collections: section.collections,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }));\n  })));\n};\n\nexport default ProfileContent;",
    "map": {
        "version": 3,
        "sources": [
            "/Users/vincentpoulain/Development/quiet/src/components/Views/ProfileContent.tsx"
        ],
        "names": [
            "React",
            "useContext",
            "useState",
            "ReactGA",
            "styled",
            "Section",
            "TabTitle",
            "span",
            "props",
            "isActive",
            "trackChangeTab",
            "initialize",
            "event",
            "category",
            "action",
            "useTab",
            "username",
            "sortedSections",
            "activeSectionId",
            "undefined",
            "activeSessionIndex",
            "findIndex",
            "x",
            "id",
            "activeTab",
            "setActiveTab",
            "setTab",
            "args",
            "ProfileContent",
            "size",
            "ResponsiveContext",
            "sections",
            "sort",
            "a",
            "b",
            "index",
            "top",
            "horizontal",
            "map",
            "section",
            "length",
            "name",
            "collections"
        ],
        "mappings": "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",
        "sourcesContent": [
            "import { Box, ResponsiveContext, Tab, Tabs } from 'grommet'\nimport React, { useContext, useState } from 'react'\nimport ReactGA from 'react-ga'\nimport { useHistory, useLocation } from 'react-router'\nimport styled from 'styled-components'\nimport { ISection } from '../../types'\nimport Section from './Section'\n\ninterface ITab {\n    isActive: boolean\n}\n\nconst TabTitle = styled.span`\n    font-size: 16px;\n    color: ${(props: ITab) => (!props.isActive ? '#333333' : '#D87551')};\n    @media screen and (max-width: 812px) {\n        font-size: 14px;\n    }\n`\n\ninterface IProfileContent {\n    sections: ISection[]\n    username: string\n    activeSectionId?: string\n}\n\n/* Hook allowing to keep tab updated with query parameters\n   We probably should React Router to do it properly in order to \n   conserve history & state.\n\n   - If no query parameter provided the first section is selected by default\n   - Query parameters named \"section\" is filled with current sectionId when new tab \n    is clicked\n*/\n\nfunction trackChangeTab() {\n    ReactGA.initialize('UA-149517534-1')\n    ReactGA.event({\n        category: 'Section',\n        action: 'Click on change section',\n    })\n}\n\nfunction useTab(username: string, sortedSections: ISection[]) {\n    // const location = useLocation()\n    // const history = useHistory()\n    // const params = new URLSearchParams(location.search)\n    const activeSectionId = undefined\n\n    const activeSessionIndex = sortedSections.findIndex(\n        x => x.id === activeSectionId\n    )\n    const [activeTab, setActiveTab] = useState(\n        activeSessionIndex !== -1 ? activeSessionIndex : 0\n    )\n\n    const setTab = (args: number) => {\n        setActiveTab(args)\n        // history.replace(`/${username}?section=${sortedSections[args].id}`)\n        trackChangeTab()\n    }\n\n    return { activeTab, setTab }\n}\n\nconst ProfileContent: React.FC<IProfileContent> = props => {\n    const size = useContext(ResponsiveContext)\n    const sortedSections = props.sections.sort((a, b) => a.index - b.index)\n    const { activeTab, setTab } = useTab(props.username, sortedSections)\n\n    return (\n        <Box\n            margin={{ top: 'small' }}\n            pad={{ horizontal: size === 'small' ? 'none' : 'large' }}\n        >\n            <Tabs\n                justify=\"start\"\n                onActive={setTab}\n                flex={false}\n                activeIndex={activeTab}\n            >\n                {sortedSections.map((section: ISection, index: number) => {\n                    return (\n                        <Tab\n                            key={section.id}\n                            title={\n                                props.sections.length > 1 && (\n                                    <TabTitle isActive={activeTab === index}>\n                                        {section.name}\n                                    </TabTitle>\n                                )\n                            }\n                        >\n                            <Section collections={section.collections} />\n                        </Tab>\n                    )\n                })}\n            </Tabs>\n        </Box>\n    )\n}\n\nexport default ProfileContent\n"
        ]
    },
    "metadata": {},
    "sourceType": "module"
}
