{
    "ast": null,
    "code": "var _jsxFileName = \"/Users/vincentpoulain/Development/quiet/src/components/Cards/Card.tsx\";\nvar __jsx = React.createElement;\nimport Box from \"grommet/components/Box/Box\";\nimport Image from \"grommet/components/Image/Image\";\nimport Stack from \"grommet/components/Stack/Stack\";\nimport React, { useState } from 'react';\nimport CardInfo from './CardInfo';\nimport CoverImage from './CoverImage';\nconst width = 18 + 8 * 18;\nconst smallWidth = width * 0.8;\nconst largeWidthPx = width + 'px';\nconst largeHeightPx = 1.68 * width + 'px';\nconst smallWidthPx = smallWidth + 'px';\nconst smallHeightPx = 1.68 * smallWidth + 'px';\nexport const CardSize = {\n  small: {\n    widthInNumber: smallWidth,\n    width: smallWidthPx,\n    rectangleImageHeight: smallHeightPx,\n    squareImageHeight: smallWidthPx\n  },\n  large: {\n    widthInNumber: width,\n    width: largeWidthPx,\n    rectangleImageHeight: largeHeightPx,\n    squareImageHeight: largeWidthPx\n  }\n};\nconst colors = {\n  album: '#417D6F',\n  book: '#D87551',\n  movie: '#7CB7A9',\n  paper: '#509DAD',\n  people: '#9E4A77',\n  podcast: '#E7A704',\n  video: '#4D6892'\n};\n\nconst Card = props => {\n  const {\n    0: isHover,\n    1: setHover\n  } = useState(false);\n  const picto = \"/pictograms/\".concat(props.item.type, \"-white.svg\");\n  return __jsx(Stack, {\n    anchor: \"top-left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, __jsx(Box // tslint:disable-next-line: jsx-no-lambda\n  , {\n    onMouseEnter: () => setHover(true) // tslint:disable-next-line: jsx-no-lambda\n    ,\n    onMouseLeave: () => setHover(false),\n    direction: \"column\",\n    align: \"center\",\n    width: props.width,\n    background: \"white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, __jsx(Box, {\n    direction: \"column\",\n    width: \"full\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, __jsx(CoverImage, {\n    placeholderColor: colors[props.item.type],\n    placeholderPicto: picto,\n    imageUrl: props.item.imageUrl,\n    small: props.small,\n    imageShape: props.imageShape,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), __jsx(CardInfo, {\n    item: props.item,\n    hover: isHover,\n    small: props.small,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }))), picto && __jsx(Box, {\n    style: {\n      top: '-12px',\n      left: '-12px',\n      position: 'relative'\n    },\n    align: \"center\",\n    justify: \"center\",\n    round: \"50%\",\n    background: \"#6FAA9C\",\n    width: \"30px\",\n    height: \"30px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, __jsx(Image, {\n    height: \"16px\",\n    src: picto,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  })));\n};\n\nexport default Card;",
    "map": {
        "version": 3,
        "sources": [
            "/Users/vincentpoulain/Development/quiet/src/components/Cards/Card.tsx"
        ],
        "names": [
            "React",
            "useState",
            "CardInfo",
            "CoverImage",
            "width",
            "smallWidth",
            "largeWidthPx",
            "largeHeightPx",
            "smallWidthPx",
            "smallHeightPx",
            "CardSize",
            "small",
            "widthInNumber",
            "rectangleImageHeight",
            "squareImageHeight",
            "large",
            "colors",
            "album",
            "book",
            "movie",
            "paper",
            "people",
            "podcast",
            "video",
            "Card",
            "props",
            "isHover",
            "setHover",
            "picto",
            "item",
            "type",
            "imageUrl",
            "imageShape",
            "top",
            "left",
            "position"
        ],
        "mappings": "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",
        "sourcesContent": [
            "import { Box, Image, Stack } from 'grommet'\nimport React, { useState } from 'react'\nimport { Item, ItemType } from '../../types'\nimport CardInfo from './CardInfo'\nimport CoverImage, { ImageShapeType } from './CoverImage'\n\ninterface CardProps {\n    item: Item\n    small: boolean\n    width: string\n    imageShape: ImageShapeType\n}\n\nconst width = 18 + 8 * 18\nconst smallWidth = width * 0.8\nconst largeWidthPx = width + 'px'\nconst largeHeightPx = 1.68 * width + 'px'\nconst smallWidthPx = smallWidth + 'px'\nconst smallHeightPx = 1.68 * smallWidth + 'px'\n\nexport const CardSize = {\n    small: {\n        widthInNumber: smallWidth,\n        width: smallWidthPx,\n        rectangleImageHeight: smallHeightPx,\n        squareImageHeight: smallWidthPx,\n    },\n    large: {\n        widthInNumber: width,\n        width: largeWidthPx,\n        rectangleImageHeight: largeHeightPx,\n        squareImageHeight: largeWidthPx,\n    },\n}\n\nconst colors: { [type in ItemType]: string } = {\n    album: '#417D6F',\n    book: '#D87551',\n    movie: '#7CB7A9',\n    paper: '#509DAD',\n    people: '#9E4A77',\n    podcast: '#E7A704',\n    video: '#4D6892',\n}\n\nconst Card: React.FC<CardProps> = props => {\n    const [isHover, setHover] = useState(false)\n    const picto = `/pictograms/${props.item.type}-white.svg`\n    return (\n        <Stack anchor=\"top-left\">\n            <Box\n                // tslint:disable-next-line: jsx-no-lambda\n                onMouseEnter={() => setHover(true)}\n                // tslint:disable-next-line: jsx-no-lambda\n                onMouseLeave={() => setHover(false)}\n                direction=\"column\"\n                align=\"center\"\n                width={props.width}\n                background=\"white\"\n            >\n                <Box direction=\"column\" width=\"full\">\n                    <CoverImage\n                        placeholderColor={colors[props.item.type]}\n                        placeholderPicto={picto}\n                        imageUrl={props.item.imageUrl}\n                        small={props.small}\n                        imageShape={props.imageShape}\n                    />\n                    <CardInfo\n                        item={props.item}\n                        hover={isHover}\n                        small={props.small}\n                    />\n                </Box>\n            </Box>\n            {picto && (\n                <Box\n                    style={{\n                        top: '-12px',\n                        left: '-12px',\n                        position: 'relative',\n                    }}\n                    align=\"center\"\n                    justify=\"center\"\n                    round=\"50%\"\n                    background=\"#6FAA9C\"\n                    width=\"30px\"\n                    height=\"30px\"\n                >\n                    <Image height=\"16px\" src={picto} />\n                </Box>\n            )}\n        </Stack>\n    )\n}\n\nexport default Card\n"
        ]
    },
    "metadata": {},
    "sourceType": "module"
}
